SHELL := /bin/bash

GOVERSION ?= 1.17

ELASTICSEARCH_NAME ?= terraform-elasticstack-es
ELASTICSEARCH_URL ?= http://$(ELASTICSEARCH_NAME):9200
ELASTICSEARCH_VERSION ?= 7.15.0
ELASTICSEARCH_USERNAME ?= elastic
ELASTICSEARCH_PASSWORD ?= changeme
ELASTICSEARCH_NETWORK ?= elasticstack-network
ELASTICSEARCH_MEM ?= 1024m

SOURCE_LOCATION ?= $(shell pwd)

.PHONY: docker-testacc
docker-testacc: docker-elasticsearch ## Run acceptance tests in the docker container
	@ docker run --rm \
		-e ELASTICSEARCH_URL=$(ELASTICSEARCH_URL) \
		-e ELASTICSEARCH_USERNAME=$(ELASTICSEARCH_USERNAME) \
		-e ELASTICSEARCH_PASSWORD=$(ELASTICSEARCH_PASSWORD) \
		--network $(ELASTICSEARCH_NETWORK) \
		-w "/provider" \
		-v "$(SOURCE_LOCATION):/provider" \
		golang:$(GOVERSION) make testacc


.PHONY: docker-elasticsearch
docker-elasticsearch: docker-network ## Start Elasticsearch single node cluster in docker container
	@ if ! docker ps --format '{{.Names}}' | grep -w $(ELASTICSEARCH_NAME) > /dev/null 2>&1 ; then \
		docker run -d \
		--memory $(ELASTICSEARCH_MEM) \
		-p 9200:9200 -p 9300:9300 \
		-e "discovery.type=single-node" \
		-e "xpack.security.enabled=true" \
		-e ELASTIC_PASSWORD=$(ELASTICSEARCH_PASSWORD) \
		--name $(ELASTICSEARCH_NAME) \
		--network $(ELASTICSEARCH_NETWORK) \
		docker.elastic.co/elasticsearch/elasticsearch:$(ELASTICSEARCH_VERSION); \
		fi


.PHONY: docker-network
docker-network: ## Create a dedicated network for ES and test runs
	@ if ! docker network ls --format '{{.Name}}' | grep -w $(ELASTICSEARCH_NETWORK) > /dev/null 2>&1 ; then \
		docker network create $(ELASTICSEARCH_NETWORK); \
		fi

.PHONY: docker-clean
docker-clean: ## Try to remove provisioned ES node and assigned network
	@ docker rm -f $(ELASTICSEARCH_NAME) || true
	@ docker network rm $(ELASTICSEARCH_NETWORK) || true
